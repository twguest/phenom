=====Usage=====This package was designed as a flexible method to easily generate SASE-like wavefields.Start by importing phenom... code-block:: python    import phenomThe simplest way to generate represenations of the SASE field is using the SASEwavefront function. .. code-block:: python    import phenom.source.sase_pulseThis function produces SASE-like wavefields with the following deterministic properties:    .. autofunction:: phenom.source.sase_pulseThis properties are based on a model of XFEL radiation containing 3 components:1. A complex wavefront2. A complex time spectrum3. A complex pointing angle tilt. These functions define require the following variables, respectively:    1. Gaussian beam width, beam divergence, horizontal and vertical position jitters.2. Pulse duration, pulse bandwidth.3. Horizontal pointing angle, vertical pointing angle. Generating a SASE pulse looks something like this:.. code-block:: python    import numpy as np    from phenom.source import sase_pulse        x = np.linspace(-500e-06, 500e-06, 512)    y = np.linspace(-500e-063, 500e-06, 512)    t = np.linspace(-100e-15, 100e-15, 512)        electric_field  = sase_pulse(x = x,                                   y = y,                                  t = t,                                  photon_energy = 9200.,                                  pulse_energy = 1e-03,                                  pulse_duration = 25e-15,                                  bandwidth = 1e03,                                  sigma = 100e-06,                                  div = 1e-03,                                  x0 = 0.,                                  y0 = 0.,                                  t0 = 2e-15,                                  theta_x = 0,                                  theta_y = 0.                                                                             )The output of this function is a complex representation of the electric field in the space-time domain.Let's take a look at its intensity in space and time:.. code-block:: python    from matplotlib import pyplot as plt    ii = abs(electric_field)**2         fig, [ax1, ax2] = plt.subplots(1,2, figsize = (12,4))        ax1.set_title("Time-averaged Spatial Profile")    im1 = ax1.imshow(ii.mean(-1), extent = [x.min(), x.max(), y.min(), y.max()])    ax1.set_xlabel("x (m)")    ax1.set_ylabel("y (m)")    fig.colorbar(im1, label = "Intensity ($W/m^2$)")        ax2.set_title("Integrated Temporal Intensity")    ax2.set_xlabel("Time (femtoseconds)")    ax2.set_ylabel("Intensity ($W/m^2$)")    ax2.plot(t*1e15, ii.sum(axis = (0,1)))         .. image:: img/sase_pulse_demo.png   :width: 600