{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generating Ensembles of Pulses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "from phenom.source import SASE_Source, Source\n",
    "from phenom.io import load_hdf5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generating a single pulse using source.SASE_Source"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from phenom.source import sase_pulse\n",
    "\n",
    "x = np.linspace(-500e-06, 500e-06, 512)\n",
    "y = np.linspace(-500e-06, 500e-06, 512)\n",
    "t = np.linspace(-100e-15, 100e-15, 512)\n",
    "\n",
    "src  = SASE_Source(x = x, \n",
    "                              y = y,\n",
    "                              t = t,\n",
    "                              photon_energy = 9200.,\n",
    "                              pulse_energy = 1e-03,\n",
    "                              pulse_duration = 25e-15,\n",
    "                              bandwidth = 1e-03,\n",
    "                              sigma = 100e-06,\n",
    "                              div = 1e-03,\n",
    "                              x0 = 0.,\n",
    "                              y0 = 0.,\n",
    "                              t0 = 2e-15,\n",
    "                              theta_x = 0.,\n",
    "                              theta_y = 0.                                                              \n",
    "           )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from matplotlib import pyplot as plt\n",
    "\n",
    "# ii = abs(electric_field)**2 ### electric-field intensity\n",
    "\n",
    "# fig, [ax1, ax2] = plt.subplots(1,2, figsize = (12,4))\n",
    "\n",
    "# ax1.set_title(\"Time-averaged Spatial Profile\")\n",
    "# im1 = ax1.imshow(ii.mean(-1), extent = [x.min(), x.max(), y.min(), y.max()])\n",
    "# ax1.set_xlabel(\"x (m)\")\n",
    "# ax1.set_ylabel(\"y (m)\")\n",
    "# fig.colorbar(im1, label = \"Intensity ($W/m^2$)\")\n",
    "\n",
    "# ax2.set_title(\"Integrated Temporal Intensity\")\n",
    "# ax2.set_xlabel(\"Time (femtoseconds)\")\n",
    "# ax2.set_ylabel(\"Intensity ($W/m^2$)\")\n",
    "# ax2.plot(t*1e15, ii.sum(axis = (0,1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# fig.savefig(\"./sase_pulse_demo.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# src.generate_pulses(\"./tmp/sase_field.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# wf = load_hdf5(\"./tmp/sase_field.h5\", proc = 'proc000')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (Spyder)",
   "language": "python3",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
